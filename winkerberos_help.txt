Help on module winkerberos:

NAME
    winkerberos - A native Kerberos SSPI client implementation.

DESCRIPTION
    This module mimics the client API of pykerberos to implement
    Kerberos SSPI authentication on Microsoft Windows.

CLASSES
    builtins.Exception(builtins.BaseException)
        KrbError
            GSSError

    class GSSError(KrbError)
     |  Method resolution order:
     |      GSSError
     |      KrbError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors inherited from KrbError:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) class method of builtins.Exception
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class KrbError(builtins.Exception)
     |  Method resolution order:
     |      KrbError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) class method of builtins.Exception
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

FUNCTIONS
    authGSSClientClean(...)
        authGSSClientClean(context)

        Destroys the client context. This function is provided for API
        compatibility with pykerberos but does nothing. The context object
        destroys itself when it is reclaimed.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.

        :Returns: :data:`AUTH_GSS_COMPLETE`

    authGSSClientInit(...)
        authGSSClientInit(service, principal=None, gssflags=GSS_C_MUTUAL_FLAG|GSS_C_SEQUENCE_FLAG, user=None, domain=None, password=None, mech_oid=GSS_MECH_OID_KRB5)

        Initializes a context for Kerberos SSPI client side authentication with
        the given service principal.

        The following flags are available (with SSPI mapping)::

          GSS_C_DELEG_FLAG    (ISC_REQ_DELEG)
          GSS_C_MUTUAL_FLAG   (ISC_REQ_MUTUAL_AUTH)
          GSS_C_REPLAY_FLAG   (ISC_REQ_REPLAY_DETECT)
          GSS_C_SEQUENCE_FLAG (ISC_REQ_SEQUENCE_DETECT)
          GSS_C_CONF_FLAG     (ISC_REQ_CONFIDENTIALITY)
          GSS_C_INTEG_FLAG    (ISC_REQ_INTEGRITY)

        The following flags are *not* available as they have no mapping in SSPI::

          GSS_C_ANON_FLAG
          GSS_C_PROT_READY_FLAG
          GSS_C_TRANS_FLAG

        :Parameters:
          - `service`: A string containing the service principal in RFC-2078 format
            (``service@hostname``) or SPN format (``service/hostname`` or
            ``service/hostname@REALM``).
          - `principal`: An optional string containing the user principal name in
            the format ``user@realm``. Can be unicode (str in python 3.x) or any 8
            bit string type that implements the buffer interface. A password can
            be provided using the format ``user@realm:password``. The principal
            and password can be percent encoded if either might include the ``:``
            character::

              try:
                  # Python 3.x
                  from urllib.parse import quote
              except ImportError:
                  # Python 2.x
                  from urllib import quote
              principal = '%s:%s' % (
                  quote(user_principal), quote(password))

            If the `user` parameter is provided `principal` is ignored.
          - `gssflags`: An optional integer used to set GSS flags. Defaults to
            GSS_C_MUTUAL_FLAG|GSS_C_SEQUENCE_FLAG.
          - `user` (DEPRECATED): An optional string that contains the name of the
            user whose credentials should be used for authentication.
          - `domain` (DEPRECATED): An optional string that contains the domain or
            workgroup name for `user`.
          - `password` (DEPRECATED): An optional string that contains the password
            for `user` in `domain`. Can be unicode (str in python 3.x) or any 8
            bit string type that implements the buffer interface.
          - `mech_oid`: Optional GSS mech OID. Defaults to GSS_MECH_OID_KRB5.
            Another possible value is GSS_MECH_OID_SPNEGO.
        :Returns: A tuple of (result, context) where result is
                  :data:`AUTH_GSS_COMPLETE` and context is an opaque value passed
                  in subsequent function calls.

        .. versionchanged:: 0.5.0
          The `principal` parameter actually works now. Deprecated the `user`,
          `domain`, and `password` parameters.
        .. versionchanged:: 0.6.0
          Added support for the `mech_oid` parameter.

    authGSSClientResponse(...)
        authGSSClientResponse(context)

        Get the response to the last successful client operation.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.

        :Returns: A base64 encoded string to return to the server.

    authGSSClientResponseConf(...)
        authGSSClientResponseConf(context)

        Determine whether confidentiality was enabled in the previously unwrapped
        buffer.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.

        :Returns: 1 if confidentiality was enabled in the previously unwrapped
                  buffer, 0 otherwise.

        .. versionadded:: 0.5.0

    authGSSClientStep(...)
        authGSSClientStep(context, challenge, **kwargs)

        Executes a single Kerberos SSPI client step using the supplied server challenge.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.
          - `challenge`: A string containing the base64 encoded server challenge.
            Ignored for the first step (pass the empty string).
          - `channel_bindings`: Optional SecPkgContext_Bindings structure
            returned by :func:`channelBindings`. This is used to bind
            the kerberos token with the TLS channel.

        :Returns: :data:`AUTH_GSS_CONTINUE` or :data:`AUTH_GSS_COMPLETE`

    authGSSClientUnwrap(...)
        authGSSClientUnwrap(context, challenge)

        Execute the client side DecryptMessage (GSSAPI Unwrap) operation.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.
          - `challenge`: A string containing the base64 encoded server
            challenge.

        :Returns: :data:`AUTH_GSS_COMPLETE`

    authGSSClientUserName(...)
        authGSSClientUserName(context)

        Get the user name of the authenticated principal. Will only succeed after
        authentication is complete.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.

        :Returns: A string containing the username.

    authGSSClientWrap(...)
        authGSSClientWrap(context, data, user=None, protect=0)

        Execute the client side EncryptMessage (GSSAPI Wrap) operation.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSClientInit`.
          - `data`: If `user` is not None, this should be the result of calling
            :func:`authGSSClientResponse` after :func:`authGSSClientUnwrap`.
            If `user` is None, this should be a base64 encoded authorization
            message as specified in Section 3.1 of RFC-4752.
          - `user`: An optional string containing the user principal to authorize.
          - `protect`: If 0 (the default), then just provide integrity protection.
            If 1, then provide confidentiality as well (requires passing
            GSS_C_CONF_FLAG to gssflags in :func:`authGSSClientInit`).

        :Returns: :data:`AUTH_GSS_COMPLETE`

        .. versionchanged:: 0.5.0
           Added the `protect` parameter.

    authGSSServerClean(...)
        authGSSServerClean(context)

        Destroys the server context. This function is provided for API
        compatibility with pykerberos but does nothing. The context object
        destroys itself when it is reclaimed.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSServerInit`.

        :Returns: :data:`AUTH_GSS_COMPLETE`

        .. versionadded:: 0.8.0

    authGSSServerInit(...)
        authGSSServerInit(service)

        Initializes a context for Kerberos SSPI server side authentication with
        the given service principal.

        :Parameters:
          - `service`: A string containing the service principal in RFC-2078 format
            (``service@hostname``) or SPN format (``service/hostname`` or
            ``service/hostname@REALM``).

        :Returns: A tuple of (result, context) where result is
                  :data:`AUTH_GSS_COMPLETE` and context is an opaque value passed
                  in subsequent function calls.

        .. versionadded:: 0.8.0

    authGSSServerResponse(...)
        authGSSServerResponse(context)

        Get the response to the last successful server operation.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSServerInit`.

        :Returns: A base64 encoded string to be sent to the client.

        .. versionadded:: 0.8.0

    authGSSServerStep(...)
        authGSSServerStep(context, challenge)

        Executes a single Kerberos SSPI server step using the supplied client data.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSServerInit`.
          - `challenge`: A string containing the base64 encoded client data.

        :Returns: :data:`AUTH_GSS_CONTINUE` or :data:`AUTH_GSS_COMPLETE`

        .. versionadded:: 0.8.0

    authGSSServerUserName(...)
        authGSSServerUserName(context)

        Get the user name of the primcipal trying to authenticate to the server.
        Will only succeed after :func:`authGSSServerStep` returns a complete or
        continue response.

        :Parameters:
          - `context`: The context object returned by :func:`authGSSServerInit`.

        :Returns: A string containing the username.

        .. versionadded:: 0.8.0

    channelBindings(...)
        channelBindings(**kwargs)

        Builds a `SecPkgContext_Bindings` struct and returns an opaque pointer to
        it. The return value can be passed to :func:`authGSSClientStep` using the
        ``channel_bindings`` keyword argument. The SecPkgContext_Bindings object
        destroys itself when it is reclaimed. While the parameters supported by
        this method match the structure of the GSSAPI `gss_channel_bindings_t
        <https://docs.oracle.com/cd/E19455-01/806-3814/overview-52/index.html>`_,
        Windows only supports the ``application_data`` parameter for now. The other
        parameters are kept for compatibility with `ccs-pykerberos
        <https://github.com/apple/ccs-pykerberos>`_ and future compatibility.

        If using an endpoint over TLS like IIS with Extended Protection or WinRM
        with the CbtHardeningLevel set to Strict then you can use this method to
        build the channel bindings structure required for a successful
        authentication. Following `RFC5929 - Channel Bindings for TLS
        <https://tools.ietf.org/html/rfc5929>`_, pass the value
        "tls-server-end-point:{cert-hash}" as the ``application_data`` argument.

        When using requests and cryptography you can access the server's
        certificate and create the channel bindings like this::

            from cryptography import x509
            from cryptography.hazmat.backends import default_backend
            from cryptography.hazmat.primitives import hashes

            if sys.version_info > (3, 0):
                socket = response.raw._fp.fp.raw._sock
            else:
                socket = response.raw._fp.fp._sock
            server_certificate = socket.getpeercert(True)
            cert = x509.load_der_x509_certificate(server_certificate, default_backend())
            hash_algorithm = cert.signature_hash_algorithm
            if hash_algorithm.name in ('md5', 'sha1'):
                digest = hashes.Hash(hashes.SHA256(), default_backend())
            else:
                digest = hashes.Hash(hash_algorithm, default_backend())
            digest.update(server_certificate)
            application_data = b'tls-server-end-point:' + digest.finalize()
            channel_bindings = winkerberos.channelBindings(application_data=application_data)

        See `<https://tools.ietf.org/html/rfc5929#section-4.1>`_ for the rules
        regarding hash algorithm choice.

        :Parameters:
          - `initiator_addrtype`: Optional int specifying the initiator address type.
            Defaults to :data:`GSS_C_AF_UNSPEC`.
          - `initiator_address`: Optional byte string containing the initiator address.
          - `acceptor_addrtype`: Optional int specifying the acceptor address type.
            Defaults to :data:`GSS_C_AF_UNSPEC`.
          - `acceptor_address`: Optional byte string containing the acceptor address.
          - `application_data`: Optional byte string containing the application data.
            An example of this would be 'tls-server-end-point:{cert-hash}' where
            {cert-hash} is the hash of the server's certificate.

        :Returns: An opaque value to be passed to the ``channel_bindings`` parameter of
            :func:`authGSSClientStep`

        .. versionadded:: 0.7.0

DATA
    AUTH_GSS_COMPLETE = 1
    AUTH_GSS_CONTINUE = 0
    GSS_C_AF_UNSPEC = 0
    GSS_C_CONF_FLAG = 16
    GSS_C_DELEG_FLAG = 1
    GSS_C_INTEG_FLAG = 65536
    GSS_C_MUTUAL_FLAG = 2
    GSS_C_REPLAY_FLAG = 4
    GSS_C_SEQUENCE_FLAG = 8
    GSS_MECH_OID_KRB5 = <capsule object "winkerberos.GSS_MECH_OID_KRB5">
    GSS_MECH_OID_SPNEGO = <capsule object "winkerberos.GSS_MECH_OID_SPNEGO...

VERSION
    0.9.0.dev0

FILE
    d:\scratches\ad_test\.venv\lib\site-packages\winkerberos.cp312-win_amd64.pyd


